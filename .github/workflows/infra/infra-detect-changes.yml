name: Detect Infrastructure Changes

on:
  workflow_call:
    inputs:
      trigger_event:
        required: true
        type: string
    outputs:
      has_changes:
        description: 'Whether infrastructure changes were detected'
        value: ${{ jobs.detect.outputs.has_changes }}
      environments:
        description: 'JSON array of affected environments'
        value: ${{ jobs.detect.outputs.environments }}
      changed_modules:
        description: 'JSON object of changed Terraform modules'
        value: ${{ jobs.detect.outputs.changed_modules }}

jobs:
  detect:
    name: "Analyze Changes"
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.analyze.outputs.has_changes }}
      environments: ${{ steps.analyze.outputs.environments }}
      changed_modules: ${{ steps.analyze.outputs.changed_modules }}
    
    steps:
      - name: "checkout_code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: "detect_changed_files"
        id: changed_files
        run: |
          if [ "${{ inputs.trigger_event }}" = "pull_request" ]; then
            # For PRs, get files changed against base branch
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '^infra/' || true)
          elif [ "${{ inputs.trigger_event }}" = "push" ]; then
            # For pushes, get files changed in the commit
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep '^infra/' || true)
          else
            # For manual triggers, assume all environments
            CHANGED_FILES="infra/live/dev infra/live/staging"
          fi
          
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo " Changed files:"
          echo "$CHANGED_FILES"
      
      - name: "analyze_infrastructure_changes"
        id: analyze
        run: |
          CHANGED_FILES="${{ steps.changed_files.outputs.changed_files }}"
          
          # Detect environments
          ENVIRONMENTS="[]"
          AFFECTED_ENVS=""
          
          if echo "$CHANGED_FILES" | grep -q "infra/live/dev"; then
            AFFECTED_ENVS="dev"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "infra/live/staging"; then
            AFFECTED_ENVS="${AFFECTED_ENVS:+$AFFECTED_ENVS,}staging"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "infra/live/prod"; then
            AFFECTED_ENVS="${AFFECTED_ENVS:+$AFFECTED_ENVS,}prod"
          fi
          
          # Handle manual workflow dispatch
          if [ "${{ inputs.trigger_event }}" = "workflow_dispatch" ]; then
            AFFECTED_ENVS="${{ github.event.inputs.environment }}"
          fi
          
          # Convert to JSON array
          if [ -n "$AFFECTED_ENVS" ]; then
            ENVIRONMENTS=$(echo "$AFFECTED_ENVS" | tr ',' '\n' | jq -R . | jq -s .)
            HAS_CHANGES="true"
          else
            ENVIRONMENTS="[]"
            HAS_CHANGES="false"
          fi
          
          echo "has_changes=$HAS_CHANGES" >> $GITHUB_OUTPUT
          echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT
          
          # Detect changed modules
          MODULES=$(echo "$CHANGED_FILES" | grep -E "infra/(modules|live)" | \
            sed -E 's|infra/live/[^/]+/[^/]+/([^/]+)/.*|\1|; s|infra/modules/([^/]+)/.*|\1|' | \
            sort -u | jq -R . | jq -s '{modules: .}')
          
          echo "changed_modules=$MODULES" >> $GITHUB_OUTPUT
          
          echo " Summary:"
          echo "  Has Changes: $HAS_CHANGES"
          echo "  Environments: $ENVIRONMENTS"
          echo "  Modules: $MODULES"
      
      - name: "report_detection_results"
        run: |
          echo "##  Infrastructure Change Detection Results"
          echo ""
          echo "**Has Changes:** ${{ steps.analyze.outputs.has_changes }}"
          echo "**Affected Environments:** ${{ steps.analyze.outputs.environments }}"
          echo "**Changed Modules:** ${{ steps.analyze.outputs.changed_modules }}"
          echo ""
          echo "### Changed Files:"
          echo '```'
          echo "${{ steps.changed_files.outputs.changed_files }}"
          echo '```'