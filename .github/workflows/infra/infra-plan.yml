name: Plan Infrastructure

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      changed_modules:
        required: false
        type: string
        default: '{}'

jobs:
  terragrunt-plan:
    name: "üìã Terragrunt Plan - ${{ inputs.environment }}"
    runs-on: ubuntu-latest
    outputs:
      plan_output: ${{ steps.plan.outputs.plan_output }}
      has_changes: ${{ steps.plan.outputs.has_changes }}
    
    steps:
      - name: "üì• Checkout Code"
        uses: actions/checkout@v4
      
      - name: "üîë Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets[format('AWS_ACCESS_KEY_ID_{0}', upper(inputs.environment))] }}
          aws-secret-access-key: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', upper(inputs.environment))] }}
          aws-region: us-east-2
      
      - name: "üîß Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
      
      - name: "üì¶ Install Terragrunt"
        run: |
          TG_VERSION=v0.58.14
          curl -L https://github.com/gruntwork-io/terragrunt/releases/download/${TG_VERSION}/terragrunt_linux_amd64 \
            -o /usr/local/bin/terragrunt
          chmod +x /usr/local/bin/terragrunt
      
      - name: "üßπ Clear Terragrunt Cache"
        working-directory: infra/live/${{ inputs.environment }}
        run: |
          echo "üßπ Clearing Terragrunt cache..."
          find . -name ".terragrunt-cache" -type d -exec rm -rf {} + 2>/dev/null || true
      
      - name: "üìã Run Terragrunt Plan"
        id: plan
        working-directory: infra/live/${{ inputs.environment }}
        env:
          TF_IN_AUTOMATION: 1
          TF_INPUT: 0
        run: |
          echo "üìã Running Terragrunt plan for ${{ inputs.environment }}..."
          echo ""
          
          # Capture plan output
          PLAN_OUTPUT_FILE="plan-${{ inputs.environment }}-$(date +%s).txt"
          
          # Run terragrunt plan
          if terragrunt run-all plan -no-color -parallelism 4 2>&1 | tee "$PLAN_OUTPUT_FILE"; then
            echo "‚úÖ Plan completed successfully"
            PLAN_SUCCESS="true"
          else
            echo "‚ùå Plan failed"
            PLAN_SUCCESS="false"
            exit 1
          fi
          
          # Check if there are any changes
          if grep -q "No changes" "$PLAN_OUTPUT_FILE"; then
            HAS_CHANGES="false"
            echo "‚ÑπÔ∏è No infrastructure changes detected"
          else
            HAS_CHANGES="true"
            echo "üìù Infrastructure changes detected"
          fi
          
          # Extract plan summary
          PLAN_SUMMARY=$(grep -E "Plan:|No changes" "$PLAN_OUTPUT_FILE" | tail -1)
          echo "plan_summary=$PLAN_SUMMARY" >> $GITHUB_OUTPUT
          echo "has_changes=$HAS_CHANGES" >> $GITHUB_OUTPUT
          echo "plan_file=$PLAN_OUTPUT_FILE" >> $GITHUB_OUTPUT
      
      - name: "üìä Generate Plan Summary"
        if: always()
        run: |
          echo "## üìã Terragrunt Plan Summary - ${{ inputs.environment }}"
          echo ""
          echo "**Environment:** ${{ inputs.environment }}"
          echo "**Status:** ${{ steps.plan.outcome }}"
          echo "**Has Changes:** ${{ steps.plan.outputs.has_changes }}"
          echo ""
          echo "### Plan Output:"
          echo '```'
          echo "${{ steps.plan.outputs.plan_summary }}"
          echo '```'
      
      - name: "üíæ Upload Plan Output"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plan-${{ inputs.environment }}
          path: infra/live/${{ inputs.environment }}/plan-*.txt
          retention-days: 7
  
  analyze-plan:
    name: "üîç Analyze Plan - ${{ inputs.environment }}"
    needs: terragrunt-plan
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: "üì• Download Plan Output"
        uses: actions/download-artifact@v4
        with:
          name: plan-${{ inputs.environment }}
      
      - name: "üîç Analyze Plan for Issues"
        run: |
          echo "üîç Analyzing plan output for potential issues..."
          
          # Check for common issues
          PLAN_FILE=$(ls plan-*.txt | head -1)
          
          # Check for Lambda issues
          if grep -q "Error.*aws_lambda_function" "$PLAN_FILE"; then
            echo "‚ö†Ô∏è Lambda function errors detected"
            grep -A5 -B5 "Error.*aws_lambda_function" "$PLAN_FILE"
          fi
          
          # Check for state lock issues
          if grep -q "Error acquiring the state lock" "$PLAN_FILE"; then
            echo "‚ö†Ô∏è State lock issues detected"
            grep -A5 -B5 "state lock" "$PLAN_FILE"
          fi
          
          # Check for permission issues
          if grep -q "UnauthorizedOperation\|AccessDenied" "$PLAN_FILE"; then
            echo "‚ö†Ô∏è Permission issues detected"
            grep -A5 -B5 "UnauthorizedOperation\|AccessDenied" "$PLAN_FILE"
          fi
          
          echo "‚úÖ Plan analysis complete"