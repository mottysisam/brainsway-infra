name: Verify Infrastructure Resources

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      action:
        required: true
        type: string
        description: 'Whether this is after a plan or deploy'

jobs:
  verify-resources:
    name: "üîç Verify Resources - ${{ inputs.environment }}"
    runs-on: ubuntu-latest
    
    steps:
      - name: "üì• Checkout Code"
        uses: actions/checkout@v4
      
      - name: "üîë Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets[format('AWS_ACCESS_KEY_ID_{0}', upper(inputs.environment))] }}
          aws-secret-access-key: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', upper(inputs.environment))] }}
          aws-region: us-east-2
      
      - name: "üîç Verify Network Resources"
        id: network
        continue-on-error: true
        run: |
          echo "üîç Verifying network resources..."
          
          # Check VPCs
          echo "  VPCs:"
          aws ec2 describe-vpcs --query 'Vpcs[?Tags[?Key==`Environment` && Value==`${{ inputs.environment }}`]].{ID:VpcId,CIDR:CidrBlock}' --output table
          
          # Check Subnets
          echo "  Subnets:"
          aws ec2 describe-subnets --query 'Subnets[?Tags[?Key==`Environment` && Value==`${{ inputs.environment }}`]].{ID:SubnetId,AZ:AvailabilityZone,CIDR:CidrBlock}' --output table
          
          # Check Security Groups
          echo "  Security Groups:"
          aws ec2 describe-security-groups --query 'SecurityGroups[?Tags[?Key==`Environment` && Value==`${{ inputs.environment }}`]].{ID:GroupId,Name:GroupName}' --output table
      
      - name: "üîç Verify Compute Resources"
        id: compute
        continue-on-error: true
        run: |
          echo "üîç Verifying compute resources..."
          
          # Check Lambda Functions
          echo "  Lambda Functions:"
          FUNCTIONS=$(aws lambda list-functions --query 'Functions[?Environment.Variables.ENVIRONMENT==`${{ inputs.environment }}`].FunctionName' --output text)
          
          if [ -n "$FUNCTIONS" ]; then
            for FUNC in $FUNCTIONS; do
              echo "    ‚úÖ $FUNC"
            done
          else
            echo "    ‚ö†Ô∏è No Lambda functions found for ${{ inputs.environment }}"
          fi
          
          # Count resources
          LAMBDA_COUNT=$(echo "$FUNCTIONS" | wc -w)
          echo "lambda_count=$LAMBDA_COUNT" >> $GITHUB_OUTPUT
      
      - name: "üîç Verify Storage Resources"
        id: storage
        continue-on-error: true
        run: |
          echo "üîç Verifying storage resources..."
          
          # Check S3 Buckets
          echo "  S3 Buckets:"
          aws s3 ls | grep -E "${{ inputs.environment }}|bw-" || echo "    ‚ÑπÔ∏è No environment-specific buckets found"
          
          # Check DynamoDB Tables
          echo "  DynamoDB Tables:"
          aws dynamodb list-tables --query 'TableNames[?contains(@, `${{ inputs.environment }}`)]' --output text || echo "    ‚ÑπÔ∏è No DynamoDB tables found"
          
          # Check RDS Instances
          echo "  RDS Instances:"
          aws rds describe-db-instances --query 'DBInstances[?TagList[?Key==`Environment` && Value==`${{ inputs.environment }}`]].DBInstanceIdentifier' --output text || echo "    ‚ÑπÔ∏è No RDS instances found"
      
      - name: "üîç Verify API Resources"
        id: api
        continue-on-error: true
        run: |
          echo "üîç Verifying API resources..."
          
          # Check API Gateway v2
          echo "  API Gateway v2:"
          aws apigatewayv2 get-apis --query 'Items[?Tags.Environment==`${{ inputs.environment }}`].{Name:Name,ID:ApiId,Endpoint:ApiEndpoint}' --output table || echo "    ‚ÑπÔ∏è No API Gateways found"
          
          # Check Route53 Records
          echo "  DNS Records:"
          # This would need the hosted zone ID
          echo "    ‚ÑπÔ∏è DNS verification requires hosted zone ID"
      
      - name: "üîç Verify IAM Resources"
        id: iam
        continue-on-error: true
        run: |
          echo "üîç Verifying IAM resources..."
          
          # Check IAM Roles
          echo "  IAM Roles:"
          aws iam list-roles --query 'Roles[?contains(RoleName, `lambda`) || contains(RoleName, `ecs`)].RoleName' --output text | head -10
      
      - name: "üìä Generate Verification Summary"
        if: always()
        run: |
          echo "## üìä Infrastructure Verification Summary - ${{ inputs.environment }}"
          echo ""
          echo "**Environment:** ${{ inputs.environment }}"
          echo "**Verification Type:** ${{ inputs.action == 'deploy' ? 'Post-Deployment' : 'Current State' }}"
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          echo "### Resource Summary:"
          echo "- **Lambda Functions:** ${{ steps.compute.outputs.lambda_count || 0 }}"
          echo "- **Network:** ${{ steps.network.outcome }}"
          echo "- **Compute:** ${{ steps.compute.outcome }}"
          echo "- **Storage:** ${{ steps.storage.outcome }}"
          echo "- **API:** ${{ steps.api.outcome }}"
          echo "- **IAM:** ${{ steps.iam.outcome }}"
          echo ""
          
          if [ "${{ inputs.action }}" = "deploy" ]; then
            echo "### Post-Deployment Status:"
            echo "Resources have been deployed. Allow 30-60 seconds for AWS to fully provision all resources."
          else
            echo "### Current Infrastructure State:"
            echo "This represents the current state of infrastructure in ${{ inputs.environment }}."
          fi