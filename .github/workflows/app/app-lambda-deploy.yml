name: Deploy Lambda Application Code

on:
  push:
    branches: [main]
    paths:
      - 'infra/lambda-functions/**'
      - 'src/**'
  pull_request:
    paths:
      - 'infra/lambda-functions/**'
      - 'src/**'
  workflow_dispatch:
    inputs:
      function_name:
        description: 'Lambda function to deploy (or "all")'
        required: true
        default: 'all'
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging

jobs:
  detect-functions:
    name: "Detect Lambda Functions"
    runs-on: ubuntu-latest
    outputs:
      functions: ${{ steps.detect.outputs.functions }}
      
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: "Detect Changed Functions"
        id: detect
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.function_name }}" = "all" ]; then
              # List all Lambda functions
              FUNCTIONS=$(ls -d infra/lambda-functions/*/ | xargs -n1 basename | jq -R . | jq -s .)
            else
              # Single function specified
              FUNCTIONS='["${{ github.event.inputs.function_name }}"]'
            fi
          else
            # Detect changed functions from git diff
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "^infra/lambda-functions/" || true)
            else
              CHANGED=$(git diff --name-only HEAD^ HEAD | grep "^infra/lambda-functions/" || true)
            fi
            
            # Extract function names
            if [ -n "$CHANGED" ]; then
              FUNCTIONS=$(echo "$CHANGED" | sed 's|infra/lambda-functions/\([^/]*\)/.*|\1|' | sort -u | jq -R . | jq -s .)
            else
              FUNCTIONS='[]'
            fi
          fi
          
          echo "functions=$FUNCTIONS" >> $GITHUB_OUTPUT
          echo "Functions to process: $FUNCTIONS"
  
  test-functions:
    name: "Test - ${{ matrix.function }}"
    needs: detect-functions
    if: ${{ needs.detect-functions.outputs.functions != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function: ${{ fromJSON(needs.detect-functions.outputs.functions) }}
    
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
      
      - name: "Detect Runtime"
        id: runtime
        run: |
          FUNC_DIR="infra/lambda-functions/${{ matrix.function }}"
          
          # Detect runtime from file extensions
          if [ -f "$FUNC_DIR/src/lambda_function.py" ] || [ -f "$FUNC_DIR/lambda_function.py" ]; then
            echo "runtime=python" >> $GITHUB_OUTPUT
            echo "Python runtime detected"
          elif [ -f "$FUNC_DIR/src/index.js" ] || [ -f "$FUNC_DIR/index.js" ]; then
            echo "runtime=nodejs" >> $GITHUB_OUTPUT
            echo "Node.js runtime detected"
          else
            echo "runtime=unknown" >> $GITHUB_OUTPUT
            echo "Unknown runtime"
          fi
      
      - name: "Setup Python"
        if: steps.runtime.outputs.runtime == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: "Setup Node.js"
        if: steps.runtime.outputs.runtime == 'nodejs'
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: "Run Tests"
        working-directory: infra/lambda-functions/${{ matrix.function }}
        run: |
          echo "Testing ${{ matrix.function }}..."
          
          if [ "${{ steps.runtime.outputs.runtime }}" = "python" ]; then
            # Python tests
            if [ -f "requirements-test.txt" ]; then
              pip install -r requirements-test.txt
            fi
            if [ -f "test_lambda.py" ]; then
              python -m pytest test_lambda.py -v
            else
              echo "No tests found"
            fi
          elif [ "${{ steps.runtime.outputs.runtime }}" = "nodejs" ]; then
            # Node.js tests
            if [ -f "package.json" ]; then
              npm install
              npm test || echo "No tests configured"
            else
              echo "No package.json found"
            fi
          fi
  
  build-and-package:
    name: "Build - ${{ matrix.function }}"
    needs: [detect-functions, test-functions]
    if: |
      needs.detect-functions.outputs.functions != '[]' &&
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function: ${{ fromJSON(needs.detect-functions.outputs.functions) }}
    
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
      
      - name: "Package Lambda Function"
        id: package
        run: |
          FUNC_DIR="infra/lambda-functions/${{ matrix.function }}"
          OUTPUT_DIR="build/${{ matrix.function }}"
          mkdir -p "$OUTPUT_DIR"
          
          echo "Packaging ${{ matrix.function }}..."
          
          # Create deployment package
          cd "$FUNC_DIR"
          
          # Package based on structure
          if [ -d "src" ]; then
            zip -r "../../$OUTPUT_DIR/function.zip" src/
          else
            zip -r "../../$OUTPUT_DIR/function.zip" .
          fi
          
          cd ../..
          
          # Calculate package size
          SIZE=$(du -h "$OUTPUT_DIR/function.zip" | cut -f1)
          echo "Package size: $SIZE"
          echo "package_path=$OUTPUT_DIR/function.zip" >> $GITHUB_OUTPUT
      
      - name: "Upload Package"
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package-${{ matrix.function }}
          path: ${{ steps.package.outputs.package_path }}
          retention-days: 7
  
  deploy-to-aws:
    name: "Deploy to AWS - ${{ matrix.function }}"
    needs: [detect-functions, build-and-package]
    if: |
      needs.detect-functions.outputs.functions != '[]' &&
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function: ${{ fromJSON(needs.detect-functions.outputs.functions) }}
    
    steps:
      - name: "Download Package"
        uses: actions/download-artifact@v4
        with:
          name: lambda-package-${{ matrix.function }}
          path: package/
      
      - name: "Determine Environment"
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          else
            # Default to dev for automatic deployments
            ENV="dev"
          fi
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "Target environment: $ENV"
      
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets[format('AWS_ACCESS_KEY_ID_{0}', upper(steps.env.outputs.environment))] }}
          aws-secret-access-key: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', upper(steps.env.outputs.environment))] }}
          aws-region: us-east-2
      
      - name: "Deploy Lambda Code"
        run: |
          echo "Deploying ${{ matrix.function }} to ${{ steps.env.outputs.environment }}..."
          
          # Update function code
          aws lambda update-function-code \
            --function-name "${{ matrix.function }}" \
            --zip-file "fileb://package/function.zip" \
            --query 'LastModified' \
            --output text
          
          echo "Deployment complete"
      
      - name: "Smoke Test"
        continue-on-error: true
        run: |
          echo "Running smoke test..."
          
          # Wait for function to be ready
          sleep 5
          
          # Invoke function with test payload
          aws lambda invoke \
            --function-name "${{ matrix.function }}" \
            --payload '{"test": true}' \
            response.json
          
          echo "Response:"
          cat response.json
          
          # Check for errors
          if grep -q "errorMessage" response.json; then
            echo "Function returned an error"
          else
            echo "Smoke test passed"
          fi