name: Lambda CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'infra/lambda-functions/**'
      - '.github/workflows/lambda-deploy.yml'
      - 'lambda-deploy-config.json'
      - 'scripts/lambda-*.sh'
  pull_request:
    branches: [main]
    paths:
      - 'infra/lambda-functions/**'
      - '.github/workflows/lambda-deploy.yml'
      - 'lambda-deploy-config.json'
      - 'scripts/lambda-*.sh'
  issue_comment:
    types: [created]

env:
  AWS_DEFAULT_REGION: us-east-2
  PYTHON_VERSION: '3.11'

jobs:
  detect_changes:
    name: detect_changed_functions
    runs-on: ubuntu-latest
    outputs:
      changed_functions: ${{ steps.changes.outputs.changed_functions }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Detect changed Lambda functions
        id: changes
        run: |
          echo "Detecting changed Lambda functions..."
          
          # Get list of changed files
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            changed_files=$(git diff --name-only origin/main...HEAD)
          else
            changed_files=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files:"
          echo "$changed_files"
          
          # Extract changed functions
          changed_functions=""
          excluded_functions="internal-router brainsway-api-router-dev"
          
          for file in $changed_files; do
            if [[ $file == infra/lambda-functions/* ]]; then
              func_name=$(echo $file | cut -d'/' -f3)
              
              # Skip excluded functions
              if [[ " $excluded_functions " =~ " $func_name " ]]; then
                echo "Skipping excluded function: $func_name"
                continue
              fi
              
              # Add to changed functions if not already present
              if [[ ! " $changed_functions " =~ " $func_name " ]]; then
                changed_functions="$changed_functions $func_name"
              fi
            fi
          done
          
          # Remove leading/trailing spaces
          changed_functions=$(echo $changed_functions | xargs)
          
          if [[ -n "$changed_functions" ]]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "changed-functions=$changed_functions" >> $GITHUB_OUTPUT
            echo "Changed functions: $changed_functions"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "changed-functions=" >> $GITHUB_OUTPUT
            echo "No Lambda function changes detected"
          fi

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        function: ${{ fromJson(format('[{0}]', join(split(needs.detect-changes.outputs.changed-functions, ' '), '","'))) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install quality tools
        run: |
          python -m pip install --upgrade pip
          pip install pylint black bandit safety pytest pytest-cov
          
      - name: Run code formatting check (Black)
        run: |
          echo "Running Black formatting check for ${{ matrix.function }}"
          if [[ -d "infra/lambda-functions/${{ matrix.function }}" ]]; then
            black --check --diff infra/lambda-functions/${{ matrix.function }}/ || {
              echo "Code formatting issues found. Run 'black infra/lambda-functions/${{ matrix.function }}/' to fix."
              exit 1
            }
          fi
          
      - name: Run code quality check (Pylint)
        run: |
          echo "Running Pylint for ${{ matrix.function }}"
          if [[ -d "infra/lambda-functions/${{ matrix.function }}" ]]; then
            cd infra/lambda-functions/${{ matrix.function }}
            
            # Install function dependencies if requirements.txt exists
            if [[ -f requirements.txt ]]; then
              pip install -r requirements.txt
            fi
            
            # Run pylint with minimum score requirement
            pylint --rcfile=../../../.pylintrc *.py || {
              echo "Pylint quality check failed. Minimum score: 8.0"
              exit 1
            }
          fi
          
      - name: Run security scan (Bandit)
        run: |
          echo "Running Bandit security scan for ${{ matrix.function }}"
          if [[ -d "infra/lambda-functions/${{ matrix.function }}" ]]; then
            bandit -r infra/lambda-functions/${{ matrix.function }}/ -f json -o bandit-report-${{ matrix.function }}.json || {
              echo "Security issues found in ${{ matrix.function }}"
              cat bandit-report-${{ matrix.function }}.json
              exit 1
            }
          fi
          
      - name: Run dependency vulnerability scan (Safety)
        run: |
          echo "Running Safety vulnerability scan for ${{ matrix.function }}"
          if [[ -f "infra/lambda-functions/${{ matrix.function }}/requirements.txt" ]]; then
            safety check -r infra/lambda-functions/${{ matrix.function }}/requirements.txt || {
              echo "Vulnerability found in dependencies for ${{ matrix.function }}"
              exit 1
            }
          fi

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-gates]
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        function: ${{ fromJson(format('[{0}]', join(split(needs.detect-changes.outputs.changed-functions, ' '), '","'))) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Make build script executable
        run: chmod +x scripts/lambda-build.sh
        
      - name: Build Lambda package
        run: |
          echo "Building Lambda package for ${{ matrix.function }}"
          ./scripts/lambda-build.sh "${{ matrix.function }}" "dist"
          
      - name: Run unit tests
        run: |
          echo "Running unit tests for ${{ matrix.function }}"
          if [[ -d "infra/lambda-functions/${{ matrix.function }}/tests" ]]; then
            cd infra/lambda-functions/${{ matrix.function }}
            
            # Install dependencies
            if [[ -f requirements.txt ]]; then
              pip install -r requirements.txt
            fi
            
            # Install test dependencies
            pip install pytest pytest-cov
            
            # Run tests with coverage
            pytest tests/ --cov=. --cov-report=term --cov-report=xml --cov-fail-under=80 || {
              echo "Unit tests failed or coverage below 80% for ${{ matrix.function }}"
              exit 1
            }
          else
            echo "No tests directory found for ${{ matrix.function }}, skipping unit tests"
          fi
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: lambda-${{ matrix.function }}-package
          path: dist/${{ matrix.function }}.zip
          retention-days: 30

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: |
      needs.detect-changes.outputs.has-changes == 'true' &&
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push'
    environment: development
    strategy:
      matrix:
        function: ${{ fromJson(format('[{0}]', join(split(needs.detect-changes.outputs.changed-functions, ' '), '","'))) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials (Dev)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: lambda-${{ matrix.function }}-package
          path: dist/
          
      - name: Make deployment script executable
        run: chmod +x scripts/lambda-deploy.sh
        
      - name: Deploy to development
        run: |
          echo "Deploying ${{ matrix.function }} to development environment"
          ./scripts/lambda-deploy.sh "${{ matrix.function }}" "dev" "824357028182" "dist/${{ matrix.function }}.zip"
          
      - name: Make validation script executable
        run: chmod +x scripts/lambda-validate.sh
        
      - name: Validate deployment
        run: |
          echo "Validating deployment of ${{ matrix.function }} in development"
          ./scripts/lambda-validate.sh "${{ matrix.function }}" "dev" "824357028182"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: |
      needs.detect-changes.outputs.has-changes == 'true' &&
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/lambda deploy staging')
    environment: staging
    strategy:
      matrix:
        function: ${{ fromJson(format('[{0}]', join(split(needs.detect-changes.outputs.changed-functions, ' '), '","'))) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials (Staging)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: lambda-${{ matrix.function }}-package
          path: dist/
          
      - name: Make deployment script executable
        run: chmod +x scripts/lambda-deploy.sh
        
      - name: Deploy to staging
        run: |
          echo "Deploying ${{ matrix.function }} to staging environment"
          ./scripts/lambda-deploy.sh "${{ matrix.function }}" "staging" "574210586915" "dist/${{ matrix.function }}.zip"
          
      - name: Make validation script executable
        run: chmod +x scripts/lambda-validate.sh
        
      - name: Validate deployment
        run: |
          echo "Validating deployment of ${{ matrix.function }} in staging"
          ./scripts/lambda-validate.sh "${{ matrix.function }}" "staging" "574210586915"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: needs.deploy-dev.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials (Dev)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          
      - name: Run integration tests
        run: |
          echo "Running integration tests for deployed functions"
          
          # Test API Gateway endpoints
          functions="${{ needs.detect-changes.outputs.changed-functions }}"
          base_url="https://api.dev.brainsway.cloud"
          
          for func in $functions; do
            echo "Testing API Gateway integration for $func"
            url="$base_url/lambda/function/$func"
            
            # Test with curl and check response
            if curl -s -f "$url" >/dev/null; then
              echo "✅ API Gateway integration test passed for $func"
            else
              echo "⚠️ API Gateway integration test failed for $func (may be expected for some functions)"
            fi
          done

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, integration-test]
    if: always()
    steps:
      - name: Notification Summary
        run: |
          echo "## Lambda CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Functions Processed:** ${{ needs.detect-changes.outputs.changed-functions }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- Quality Gates: ${{ needs.quality-gates.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build and Test: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Development Deployment: ${{ needs.deploy-dev.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Staging Deployment: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY