name: Notifications

on:
  workflow_call:
    inputs:
      workflow_name:
        required: true
        type: string
      status:
        required: true
        type: string
      environment:
        required: false
        type: string
      details:
        required: false
        type: string

jobs:
  github-status:
    name: "📊 Update GitHub Status"
    runs-on: ubuntu-latest
    
    steps:
      - name: "📊 Update Commit Status"
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ inputs.status }}';
            const state = status === 'success' ? 'success' : 'failure';
            const description = status === 'success' 
              ? '✅ Pipeline completed successfully'
              : '❌ Pipeline failed';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              description: description,
              context: '${{ inputs.workflow_name }}'
            });
  
  pr-comment:
    name: "💬 Update PR Comment"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: "💬 Comment on PR"
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ inputs.status }}';
            const emoji = status === 'success' ? '✅' : '❌';
            const statusText = status === 'success' ? 'SUCCESS' : 'FAILED';
            
            let comment = `## ${emoji} ${{ inputs.workflow_name }} - ${statusText}\n\n`;
            comment += `**Status:** ${statusText}\n`;
            comment += `**Environment:** ${{ inputs.environment || 'N/A' }}\n`;
            comment += `**Timestamp:** ${new Date().toISOString()}\n`;
            
            if ('${{ inputs.details }}') {
              comment += `\n**Details:** ${{ inputs.details }}\n`;
            }
            
            comment += `\n🔗 [View Logs](${context.payload.repository.html_url}/actions/runs/${{ github.run_id }})\n`;
            
            // Find existing comment to update
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('${{ inputs.workflow_name }}')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }