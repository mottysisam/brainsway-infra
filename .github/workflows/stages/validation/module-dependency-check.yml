name: Module Dependency Check

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  module-dependencies:
    name: "Module Dependencies - ${{ inputs.environment }}"
    runs-on: ubuntu-latest
    
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
      
      - name: "Check Module References"
        run: |
          echo "Checking module dependencies for ${{ inputs.environment }}..."
          
          MODULES_DIR="infra/modules"
          LIVE_DIR="infra/live/${{ inputs.environment }}"
          
          if [ ! -d "$LIVE_DIR" ]; then
            echo "Environment directory not found: $LIVE_DIR"
            exit 1
          fi
          
          echo "Scanning directory: $LIVE_DIR"
          echo "Module source: $MODULES_DIR"
          
          # Find all module references in terragrunt files
          echo "Finding module references..."
          MODULE_REFS=$(grep -r 'source.*\.\.\/\.\.\/\.\.\/\.\.\/modules' "$LIVE_DIR" 2>/dev/null | \
            sed -E 's/.*modules\/([^"\/]+).*/\1/' | sort -u || echo "")
          
          if [ -z "$MODULE_REFS" ]; then
            echo "No module references found (this might indicate a configuration issue)"
            exit 0
          fi
          
          echo "Found module references:"
          echo "$MODULE_REFS" | sed 's/^/  - /'
          
          # Check each referenced module exists
          MISSING_MODULES=""
          FOUND_MODULES=""
          
          for MODULE in $MODULE_REFS; do
            if [ -d "$MODULES_DIR/$MODULE" ]; then
              echo "  Module exists: $MODULE"
              FOUND_MODULES="$FOUND_MODULES $MODULE"
              
              # Check if module has required files
              if [ -f "$MODULES_DIR/$MODULE/main.tf" ]; then
                echo "    main.tf: "
              else
                echo "    main.tf: missing"
              fi
              
              if [ -f "$MODULES_DIR/$MODULE/variables.tf" ]; then
                echo "    variables.tf: "
              else
                echo "    variables.tf: missing"
              fi
              
              if [ -f "$MODULES_DIR/$MODULE/outputs.tf" ]; then
                echo "    outputs.tf: "
              else
                echo "    outputs.tf: missing"
              fi
              
            else
              echo "  Missing module: $MODULE"
              MISSING_MODULES="$MISSING_MODULES $MODULE"
            fi
          done
          
          # Summary
          FOUND_COUNT=$(echo "$FOUND_MODULES" | wc -w)
          MISSING_COUNT=$(echo "$MISSING_MODULES" | wc -w)
          
          echo ""
          echo "Summary:"
          echo "  Found modules: $FOUND_COUNT"
          echo "  Missing modules: $MISSING_COUNT"
          
          if [ -n "$MISSING_MODULES" ] && [ "$MISSING_COUNT" -gt 0 ]; then
            echo ""
            echo "Missing modules detected:"
            echo "$MISSING_MODULES" | tr ' ' '\n' | sed 's/^/  - /'
            echo ""
            echo "Possible causes:"
            echo "  - Module not yet created"
            echo "  - Incorrect module reference path"
            echo "  - Module moved or renamed"
            exit 1
          else
            echo ""
            echo "All module dependencies satisfied"
          fi
      
      - name: "Check for Circular Dependencies"
        run: |
          echo "Checking for circular dependencies..."
          
          LIVE_DIR="infra/live/${{ inputs.environment }}"
          
          # Look for dependency cycles in terragrunt files
          echo "Analyzing dependency chain..."
          
          # Find all dependency declarations
          DEPS=$(find "$LIVE_DIR" -name "terragrunt.hcl" -exec grep -l "dependency" {} \; 2>/dev/null || echo "")
          
          if [ -z "$DEPS" ]; then
            echo "No dependencies found"
            echo "No circular dependencies possible"
          else
            echo "Files with dependencies:"
            echo "$DEPS" | sed 's/^/  - /'
            
            # For now, just log this - full cycle detection would require more complex analysis
            echo "Circular dependency detection requires runtime analysis"
            echo "Static check complete"
          fi
      
      - name: "Generate Dependency Report"
        run: |
          echo "Generating dependency report..."
          
          cat > dependency-report-${{ inputs.environment }}.json << EOF
          {
            "environment": "${{ inputs.environment }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "modules_directory": "infra/modules",
            "live_directory": "infra/live/${{ inputs.environment }}",
            "summary": {
              "total_modules_available": $(ls -1 infra/modules | wc -l),
              "total_modules_referenced": $(grep -r 'source.*modules' infra/live/${{ inputs.environment }} 2>/dev/null | wc -l || echo "0"),
              "validation_status": "passed"
            }
          }
          EOF
          
          echo "Dependency report generated: dependency-report-${{ inputs.environment }}.json"
      
      - name: "Upload Dependency Report"
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report-${{ inputs.environment }}
          path: dependency-report-${{ inputs.environment }}.json
          retention-days: 7