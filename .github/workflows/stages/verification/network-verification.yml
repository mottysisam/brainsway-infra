name: Network Verification

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  network-verification:
    name: "🌐 Network Verification - ${{ inputs.environment }}"
    runs-on: ubuntu-latest
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
      
      - name: "🔑 Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets[format('AWS_ACCESS_KEY_ID_{0}', upper(inputs.environment))] }}
          aws-secret-access-key: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', upper(inputs.environment))] }}
          aws-region: us-east-2
      
      - name: "🌐 VPC Verification"
        run: |
          echo "🌐 Verifying VPC configuration for ${{ inputs.environment }}..."
          
          # Find VPCs for this environment
          VPCS=$(aws ec2 describe-vpcs \
            --filters "Name=tag:Environment,Values=${{ inputs.environment }}" \
            --query 'Vpcs[*].{Id:VpcId,CidrBlock:CidrBlock,State:State}' \
            --output table 2>/dev/null || echo "")
          
          if [ -n "$VPCS" ] && [ "$VPCS" != "" ]; then
            echo "📋 VPCs found for ${{ inputs.environment }}:"
            echo "$VPCS"
            
            # Count VPCs
            VPC_COUNT=$(aws ec2 describe-vpcs \
              --filters "Name=tag:Environment,Values=${{ inputs.environment }}" \
              --query 'length(Vpcs)' --output text)
            
            echo "📊 VPC Count: $VPC_COUNT"
            echo "vpc_count=$VPC_COUNT" >> $GITHUB_OUTPUT
            
            # Check VPC states
            AVAILABLE_VPCS=$(aws ec2 describe-vpcs \
              --filters "Name=tag:Environment,Values=${{ inputs.environment }}" "Name=state,Values=available" \
              --query 'length(Vpcs)' --output text)
            
            echo "✅ Available VPCs: $AVAILABLE_VPCS"
            echo "available_vpcs=$AVAILABLE_VPCS" >> $GITHUB_OUTPUT
            
          else
            echo "📝 No VPCs found for ${{ inputs.environment }}"
            echo "vpc_count=0" >> $GITHUB_OUTPUT
            echo "available_vpcs=0" >> $GITHUB_OUTPUT
          fi
      
      - name: "🔗 Subnet Verification"
        run: |
          echo "🔗 Verifying subnet configuration..."
          
          # Find subnets for this environment
          SUBNETS=$(aws ec2 describe-subnets \
            --filters "Name=tag:Environment,Values=${{ inputs.environment }}" \
            --query 'Subnets[*].{Id:SubnetId,VpcId:VpcId,AvailabilityZone:AvailabilityZone,CidrBlock:CidrBlock,State:State}' \
            --output table 2>/dev/null || echo "")
          
          if [ -n "$SUBNETS" ] && [ "$SUBNETS" != "" ]; then
            echo "📋 Subnets found for ${{ inputs.environment }}:"
            echo "$SUBNETS"
            
            # Count subnets by type
            TOTAL_SUBNETS=$(aws ec2 describe-subnets \
              --filters "Name=tag:Environment,Values=${{ inputs.environment }}" \
              --query 'length(Subnets)' --output text)
            
            PUBLIC_SUBNETS=$(aws ec2 describe-subnets \
              --filters "Name=tag:Environment,Values=${{ inputs.environment }}" "Name=tag:Type,Values=public" \
              --query 'length(Subnets)' --output text 2>/dev/null || echo "0")
            
            PRIVATE_SUBNETS=$(aws ec2 describe-subnets \
              --filters "Name=tag:Environment,Values=${{ inputs.environment }}" "Name=tag:Type,Values=private" \
              --query 'length(Subnets)' --output text 2>/dev/null || echo "0")
            
            echo "📊 Subnet Summary:"
            echo "  Total: $TOTAL_SUBNETS"
            echo "  Public: $PUBLIC_SUBNETS"
            echo "  Private: $PRIVATE_SUBNETS"
            
            echo "subnet_count=$TOTAL_SUBNETS" >> $GITHUB_OUTPUT
            echo "public_subnets=$PUBLIC_SUBNETS" >> $GITHUB_OUTPUT
            echo "private_subnets=$PRIVATE_SUBNETS" >> $GITHUB_OUTPUT
            
          else
            echo "📝 No subnets found for ${{ inputs.environment }}"
            echo "subnet_count=0" >> $GITHUB_OUTPUT
            echo "public_subnets=0" >> $GITHUB_OUTPUT
            echo "private_subnets=0" >> $GITHUB_OUTPUT
          fi
      
      - name: "🌐 Internet Gateway Verification"
        run: |
          echo "🌐 Verifying Internet Gateway configuration..."
          
          # Find Internet Gateways
          IGWS=$(aws ec2 describe-internet-gateways \
            --filters "Name=tag:Environment,Values=${{ inputs.environment }}" \
            --query 'InternetGateways[*].{Id:InternetGatewayId,State:State,VpcId:Attachments[0].VpcId}' \
            --output table 2>/dev/null || echo "")
          
          if [ -n "$IGWS" ] && [ "$IGWS" != "" ]; then
            echo "📋 Internet Gateways found:"
            echo "$IGWS"
            
            IGW_COUNT=$(aws ec2 describe-internet-gateways \
              --filters "Name=tag:Environment,Values=${{ inputs.environment }}" \
              --query 'length(InternetGateways)' --output text)
            
            echo "📊 Internet Gateway Count: $IGW_COUNT"
            echo "igw_count=$IGW_COUNT" >> $GITHUB_OUTPUT
            
          else
            echo "📝 No Internet Gateways found for ${{ inputs.environment }}"
            echo "igw_count=0" >> $GITHUB_OUTPUT
          fi
      
      - name: "🛣️ Route Table Verification"
        run: |
          echo "🛣️ Verifying route table configuration..."
          
          # Find route tables
          ROUTE_TABLES=$(aws ec2 describe-route-tables \
            --filters "Name=tag:Environment,Values=${{ inputs.environment }}" \
            --query 'RouteTables[*].{Id:RouteTableId,VpcId:VpcId,Routes:length(Routes)}' \
            --output table 2>/dev/null || echo "")
          
          if [ -n "$ROUTE_TABLES" ] && [ "$ROUTE_TABLES" != "" ]; then
            echo "📋 Route Tables found:"
            echo "$ROUTE_TABLES"
            
            RT_COUNT=$(aws ec2 describe-route-tables \
              --filters "Name=tag:Environment,Values=${{ inputs.environment }}" \
              --query 'length(RouteTables)' --output text)
            
            echo "📊 Route Table Count: $RT_COUNT"
            echo "route_table_count=$RT_COUNT" >> $GITHUB_OUTPUT
            
            # Check for internet routes
            INTERNET_ROUTES=$(aws ec2 describe-route-tables \
              --filters "Name=tag:Environment,Values=${{ inputs.environment }}" \
              --query 'RouteTables[?Routes[?DestinationCidrBlock==`0.0.0.0/0`]]' \
              --output text 2>/dev/null | wc -l || echo "0")
            
            echo "🌐 Route tables with internet access: $INTERNET_ROUTES"
            echo "internet_routes=$INTERNET_ROUTES" >> $GITHUB_OUTPUT
            
          else
            echo "📝 No route tables found for ${{ inputs.environment }}"
            echo "route_table_count=0" >> $GITHUB_OUTPUT
            echo "internet_routes=0" >> $GITHUB_OUTPUT
          fi
      
      - name: "🛡️ Security Group Verification"
        run: |
          echo "🛡️ Verifying security group configuration..."
          
          # Find security groups
          SECURITY_GROUPS=$(aws ec2 describe-security-groups \
            --filters "Name=tag:Environment,Values=${{ inputs.environment }}" \
            --query 'SecurityGroups[*].{Id:GroupId,Name:GroupName,VpcId:VpcId,Rules:length(IpPermissions)}' \
            --output table 2>/dev/null || echo "")
          
          if [ -n "$SECURITY_GROUPS" ] && [ "$SECURITY_GROUPS" != "" ]; then
            echo "📋 Security Groups found:"
            echo "$SECURITY_GROUPS"
            
            SG_COUNT=$(aws ec2 describe-security-groups \
              --filters "Name=tag:Environment,Values=${{ inputs.environment }}" \
              --query 'length(SecurityGroups)' --output text)
            
            echo "📊 Security Group Count: $SG_COUNT"
            echo "security_group_count=$SG_COUNT" >> $GITHUB_OUTPUT
            
            # Check for overly permissive rules
            OPEN_RULES=$(aws ec2 describe-security-groups \
              --filters "Name=tag:Environment,Values=${{ inputs.environment }}" \
              --query 'SecurityGroups[?IpPermissions[?IpRanges[?CidrIp==`0.0.0.0/0`]]]' \
              --output text 2>/dev/null | wc -l || echo "0")
            
            echo "⚠️ Security groups with 0.0.0.0/0 rules: $OPEN_RULES"
            echo "open_security_rules=$OPEN_RULES" >> $GITHUB_OUTPUT
            
            if [ "$OPEN_RULES" -gt 0 ]; then
              echo "🔍 Security groups with wide-open access:"
              aws ec2 describe-security-groups \
                --filters "Name=tag:Environment,Values=${{ inputs.environment }}" \
                --query 'SecurityGroups[?IpPermissions[?IpRanges[?CidrIp==`0.0.0.0/0`]]].{Id:GroupId,Name:GroupName}' \
                --output table
            fi
            
          else
            echo "📝 No security groups found for ${{ inputs.environment }}"
            echo "security_group_count=0" >> $GITHUB_OUTPUT
            echo "open_security_rules=0" >> $GITHUB_OUTPUT
          fi
      
      - name: "🔗 NAT Gateway Verification"
        run: |
          echo "🔗 Verifying NAT Gateway configuration..."
          
          # Find NAT Gateways
          NAT_GATEWAYS=$(aws ec2 describe-nat-gateways \
            --filter "Name=tag:Environment,Values=${{ inputs.environment }}" \
            --query 'NatGateways[*].{Id:NatGatewayId,SubnetId:SubnetId,State:State,Type:ConnectivityType}' \
            --output table 2>/dev/null || echo "")
          
          if [ -n "$NAT_GATEWAYS" ] && [ "$NAT_GATEWAYS" != "" ]; then
            echo "📋 NAT Gateways found:"
            echo "$NAT_GATEWAYS"
            
            NAT_COUNT=$(aws ec2 describe-nat-gateways \
              --filter "Name=tag:Environment,Values=${{ inputs.environment }}" \
              --query 'length(NatGateways)' --output text)
            
            echo "📊 NAT Gateway Count: $NAT_COUNT"
            echo "nat_gateway_count=$NAT_COUNT" >> $GITHUB_OUTPUT
            
            # Check states
            AVAILABLE_NATS=$(aws ec2 describe-nat-gateways \
              --filter "Name=tag:Environment,Values=${{ inputs.environment }}" "Name=state,Values=available" \
              --query 'length(NatGateways)' --output text)
            
            echo "✅ Available NAT Gateways: $AVAILABLE_NATS"
            echo "available_nat_gateways=$AVAILABLE_NATS" >> $GITHUB_OUTPUT
            
          else
            echo "📝 No NAT Gateways found for ${{ inputs.environment }}"
            echo "nat_gateway_count=0" >> $GITHUB_OUTPUT
            echo "available_nat_gateways=0" >> $GITHUB_OUTPUT
          fi
      
      - name: "📊 Network Health Assessment"
        run: |
          echo "📊 Performing network health assessment..."
          
          VPC_COUNT="${{ steps.vpc-verification.outputs.vpc_count }}"
          SUBNET_COUNT="${{ steps.subnet-verification.outputs.subnet_count }}"
          IGW_COUNT="${{ steps.internet-gateway-verification.outputs.igw_count }}"
          OPEN_RULES="${{ steps.security-group-verification.outputs.open_security_rules }}"
          
          echo "🏥 Network Health Summary:"
          echo "  VPCs: $VPC_COUNT"
          echo "  Subnets: $SUBNET_COUNT"
          echo "  Internet Gateways: $IGW_COUNT"
          echo "  Open Security Rules: $OPEN_RULES"
          
          # Determine overall health
          HEALTH_SCORE=100
          HEALTH_ISSUES=""
          
          if [ "$VPC_COUNT" -eq 0 ]; then
            HEALTH_SCORE=$((HEALTH_SCORE - 30))
            HEALTH_ISSUES="$HEALTH_ISSUES no-vpc"
          fi
          
          if [ "$SUBNET_COUNT" -eq 0 ]; then
            HEALTH_SCORE=$((HEALTH_SCORE - 20))
            HEALTH_ISSUES="$HEALTH_ISSUES no-subnets"
          fi
          
          if [ "$OPEN_RULES" -gt 0 ]; then
            HEALTH_SCORE=$((HEALTH_SCORE - 15))
            HEALTH_ISSUES="$HEALTH_ISSUES open-security-rules"
          fi
          
          if [ $HEALTH_SCORE -ge 80 ]; then
            echo "✅ Network health: EXCELLENT ($HEALTH_SCORE/100)"
            echo "network_health=excellent" >> $GITHUB_OUTPUT
          elif [ $HEALTH_SCORE -ge 60 ]; then
            echo "⚠️ Network health: GOOD ($HEALTH_SCORE/100)"
            echo "network_health=good" >> $GITHUB_OUTPUT
          elif [ $HEALTH_SCORE -ge 40 ]; then
            echo "⚠️ Network health: FAIR ($HEALTH_SCORE/100)"
            echo "network_health=fair" >> $GITHUB_OUTPUT
          else
            echo "❌ Network health: POOR ($HEALTH_SCORE/100)"
            echo "network_health=poor" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "$HEALTH_ISSUES" ]; then
            echo "🔍 Issues detected: $HEALTH_ISSUES"
            echo "health_issues=$HEALTH_ISSUES" >> $GITHUB_OUTPUT
          fi
          
          echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
      
      - name: "📊 Generate Network Report"
        if: always()
        run: |
          echo "📊 Generating network verification report..."
          
          cat > network-report-${{ inputs.environment }}.json << EOF
          {
            "environment": "${{ inputs.environment }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "resources": {
              "vpcs": {
                "total": ${{ steps.vpc-verification.outputs.vpc_count || 0 }},
                "available": ${{ steps.vpc-verification.outputs.available_vpcs || 0 }}
              },
              "subnets": {
                "total": ${{ steps.subnet-verification.outputs.subnet_count || 0 }},
                "public": ${{ steps.subnet-verification.outputs.public_subnets || 0 }},
                "private": ${{ steps.subnet-verification.outputs.private_subnets || 0 }}
              },
              "internet_gateways": ${{ steps.internet-gateway-verification.outputs.igw_count || 0 }},
              "route_tables": ${{ steps.route-table-verification.outputs.route_table_count || 0 }},
              "security_groups": ${{ steps.security-group-verification.outputs.security_group_count || 0 }},
              "nat_gateways": ${{ steps.nat-gateway-verification.outputs.nat_gateway_count || 0 }}
            },
            "security": {
              "open_security_rules": ${{ steps.security-group-verification.outputs.open_security_rules || 0 }},
              "internet_routes": ${{ steps.route-table-verification.outputs.internet_routes || 0 }}
            },
            "health": {
              "score": ${{ steps.network-health.outputs.health_score || 0 }},
              "status": "${{ steps.network-health.outputs.network_health || 'unknown' }}",
              "issues": "${{ steps.network-health.outputs.health_issues || 'none' }}"
            }
          }
          EOF
          
          echo "✅ Network report generated: network-report-${{ inputs.environment }}.json"
      
      - name: "💾 Upload Network Report"
        uses: actions/upload-artifact@v4
        with:
          name: network-report-${{ inputs.environment }}
          path: network-report-${{ inputs.environment }}.json
          retention-days: 14