# Generated by Claude on 2025-08-14 for: Sync Clock Lambda Function
# Database time synchronization

import json
import os
import logging
from datetime import datetime, timezone
import traceback

# Configure logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Environment variables
ENVIRONMENT = os.environ.get('ENVIRONMENT', 'dev')

def lambda_handler(event, context):
    """
    Sync Clock Lambda Handler
    Returns current timestamp and system information for database synchronization
    """
    logger.info(f"Sync Clock Handler - Event: {json.dumps(event, default=str)}")
    
    try:
        # Get current UTC timestamp
        now_utc = datetime.now(timezone.utc)
        timestamp_iso = now_utc.isoformat()
        timestamp_unix = int(now_utc.timestamp())
        
        # Prepare response data
        sync_data = {
            'timestamp': {
                'iso': timestamp_iso,
                'unix': timestamp_unix,
                'formatted': now_utc.strftime('%Y-%m-%d %H:%M:%S UTC')
            },
            'environment': ENVIRONMENT,
            'function_name': 'sync-clock',
            'aws_region': os.environ.get('AWS_DEFAULT_REGION', 'us-east-2'),
            'aws_request_id': context.aws_request_id if context else 'unknown',
            'system_info': {
                'python_version': os.sys.version.split()[0],
                'timezone': 'UTC'
            },
            'status': 'success'
        }
        
        # Handle test requests
        if isinstance(event, dict) and event.get('test', False):
            sync_data['test_mode'] = True
            sync_data['message'] = 'Test request processed successfully'
        
        # Return successful response
        response = {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                'Access-Control-Allow-Methods': 'GET,POST,OPTIONS',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': '0'
            },
            'body': json.dumps(sync_data, indent=2)
        }
        
        logger.info(f"Sync clock response: {json.dumps(response, default=str)}")
        return response
        
    except Exception as e:
        logger.error(f"Sync clock error: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        error_response = {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'status': 'error',
                'error': 'Internal server error',
                'message': str(e),
                'environment': ENVIRONMENT,
                'function_name': 'sync-clock',
                'aws_request_id': context.aws_request_id if context else 'unknown'
            }, indent=2)
        }
        
        return error_response