# Generated by Claude on 2025-08-14 for: Lambda Test Runner Function
import json
import os
import boto3
import logging
from datetime import datetime
import traceback

logger = logging.getLogger()
logger.setLevel(logging.INFO)

lambda_client = boto3.client('lambda')
s3_client = boto3.client('s3')
ENVIRONMENT = os.environ.get('ENVIRONMENT', 'dev')
TEST_REPORT_BUCKET = os.environ.get('TEST_REPORT_BUCKET')

def lambda_handler(event, context):
    logger.info(f"Lambda Test Runner - Event: {json.dumps(event, default=str)}")
    
    try:
        # Handle test mode
        if isinstance(event, dict) and event.get('test', False):
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({
                    'success': True,
                    'message': 'Test mode - lambda-test-runner function',
                    'environment': ENVIRONMENT,
                    'function': 'lambda-test-runner'
                })
            }
        
        # Parse request to get functions to test
        functions_to_test = []
        if 'body' in event:
            try:
                body = json.loads(event['body']) if isinstance(event['body'], str) else event['body']
                functions_to_test = body.get('functions', [])
            except json.JSONDecodeError:
                logger.warning("Could not parse request body")
        
        # Default test functions if none specified
        if not functions_to_test:
            functions_to_test = [
                'brainsway-sync-clock-dev',
                'brainsway-insert-ppu-data-dev',
                'brainsway-generate-presigned-url-dev',
                'brainsway-presigned-url-s3-upload-dev',
                'brainsway-software-update-handler-dev'
            ]
        
        test_results = []
        
        # Test each function
        for function_name in functions_to_test:
            try:
                logger.info(f"Testing function: {function_name}")
                
                # Invoke function with test payload
                response = lambda_client.invoke(
                    FunctionName=function_name,
                    InvocationType='RequestResponse',
                    Payload=json.dumps({'test': True})
                )
                
                # Parse response
                response_payload = json.loads(response['Payload'].read())
                
                test_result = {
                    'function_name': function_name,
                    'status': 'success' if response['StatusCode'] == 200 else 'failed',
                    'status_code': response['StatusCode'],
                    'response': response_payload,
                    'timestamp': datetime.utcnow().isoformat()
                }
                
                test_results.append(test_result)
                logger.info(f"Test result for {function_name}: {test_result['status']}")
                
            except Exception as e:
                logger.error(f"Failed to test function {function_name}: {str(e)}")
                test_results.append({
                    'function_name': function_name,
                    'status': 'error',
                    'error': str(e),
                    'timestamp': datetime.utcnow().isoformat()
                })
        
        # Generate test report
        report = {
            'test_run_id': f"test-{datetime.utcnow().strftime('%Y%m%d-%H%M%S')}",
            'environment': ENVIRONMENT,
            'timestamp': datetime.utcnow().isoformat(),
            'total_functions': len(functions_to_test),
            'passed': len([r for r in test_results if r['status'] == 'success']),
            'failed': len([r for r in test_results if r['status'] in ['failed', 'error']]),
            'results': test_results
        }
        
        # Save report to S3 if configured
        if TEST_REPORT_BUCKET:
            try:
                report_key = f"test-reports/{report['test_run_id']}.json"
                s3_client.put_object(
                    Bucket=TEST_REPORT_BUCKET,
                    Key=report_key,
                    Body=json.dumps(report, indent=2),
                    ContentType='application/json'
                )
                report['report_s3_location'] = f"s3://{TEST_REPORT_BUCKET}/{report_key}"
                logger.info(f"Test report saved to S3: {report['report_s3_location']}")
            except Exception as e:
                logger.error(f"Failed to save report to S3: {str(e)}")
        
        # Return test results
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({
                'success': True,
                'message': 'Lambda test run completed',
                'report': report,
                'environment': ENVIRONMENT,
                'function': 'lambda-test-runner'
            })
        }
        
    except Exception as e:
        logger.error(f"Test runner error: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({
                'success': False,
                'error': str(e),
                'environment': ENVIRONMENT,
                'function': 'lambda-test-runner'
            })
        }