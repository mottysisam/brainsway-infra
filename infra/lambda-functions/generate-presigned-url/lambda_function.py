# Generated by Claude on 2025-08-14 for: Generate Presigned URL Lambda Function
import json
import os
import boto3
import logging
from botocore.exceptions import ClientError
from urllib.parse import urlparse
import traceback

logger = logging.getLogger()
logger.setLevel(logging.INFO)

s3_client = boto3.client('s3')
ENVIRONMENT = os.environ.get('ENVIRONMENT', 'dev')

# Environment-specific S3 bucket configuration
S3_BUCKETS = {
    'dev': 'stsoftwareupdate-dev',
    'staging': 'stsoftwareupdate-staging',
    'prod': 'stsoftwareupdate'
}

def parse_request_body(event):
    """Parse request body from various event formats"""
    try:
        # Direct body from API Gateway
        if 'body' in event:
            if isinstance(event['body'], dict):
                return event['body']
            elif isinstance(event['body'], str):
                return json.loads(event['body'])
        
        # Query parameters
        if 'queryStringParameters' in event and event['queryStringParameters']:
            return event['queryStringParameters']
            
        # Direct event data (for testing)
        if 'bucket' in event or 'key' in event or 'object_key' in event:
            return event
            
        # Default empty data
        return {}
        
    except json.JSONDecodeError as e:
        logger.error(f"Failed to parse request body: {str(e)}")
        raise ValueError("Invalid JSON in request body")

def validate_s3_parameters(data):
    """Validate S3 bucket and key parameters"""
    bucket = data.get('bucket')
    key = data.get('key') or data.get('object_key')
    
    if not key:
        raise ValueError("Missing required parameter: 'key' or 'object_key'")
    
    # Use environment-specific bucket if not provided
    if not bucket:
        bucket = S3_BUCKETS.get(ENVIRONMENT)
        if not bucket:
            raise ValueError(f"No default bucket configured for environment: {ENVIRONMENT}")
    
    # Validate key format
    if not isinstance(key, str) or len(key.strip()) == 0:
        raise ValueError("Key must be a non-empty string")
    
    # Sanitize key - remove leading slashes
    key = key.lstrip('/')
    
    return bucket, key

def lambda_handler(event, context):
    logger.info(f"Generate Presigned URL Handler - Event: {json.dumps(event, default=str)}")
    
    try:
        # Handle test mode
        if isinstance(event, dict) and event.get('test', False):
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({
                    'success': True,
                    'message': 'Test mode - generate-presigned-url function',
                    'environment': ENVIRONMENT,
                    'function': 'generate-presigned-url',
                    'available_buckets': S3_BUCKETS
                })
            }
        
        # Parse request parameters
        request_data = parse_request_body(event)
        logger.info(f"Parsed request data: {json.dumps(request_data, default=str)}")
        
        # Validate and extract S3 parameters
        bucket, key = validate_s3_parameters(request_data)
        
        # Get optional parameters
        expiration = int(request_data.get('expiration', 3600))  # 1 hour default
        operation = request_data.get('operation', 'get_object')  # get_object or put_object
        
        # Validate expiration (max 7 days = 604800 seconds)
        if expiration > 604800:
            expiration = 604800
        elif expiration < 60:
            expiration = 60
        
        # Generate presigned URL
        if operation == 'put_object':
            # For uploads
            presigned_url = s3_client.generate_presigned_url(
                'put_object',
                Params={'Bucket': bucket, 'Key': key},
                ExpiresIn=expiration
            )
            operation_type = 'upload'
        else:
            # For downloads (default)
            presigned_url = s3_client.generate_presigned_url(
                'get_object',
                Params={'Bucket': bucket, 'Key': key},
                ExpiresIn=expiration
            )
            operation_type = 'download'
        
        logger.info(f"Generated presigned URL for {operation_type}: {bucket}/{key}")
        
        # Return successful response
        response_data = {
            'success': True,
            'presigned_url': presigned_url,
            'bucket': bucket,
            'key': key,
            'operation': operation_type,
            'expiration_seconds': expiration,
            'environment': ENVIRONMENT,
            'function': 'generate-presigned-url'
        }
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                'Access-Control-Allow-Methods': 'GET,POST,OPTIONS'
            },
            'body': json.dumps(response_data)
        }
        
    except ValueError as e:
        logger.error(f"Validation error: {str(e)}")
        return {
            'statusCode': 400,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'success': False,
                'error': 'Bad Request',
                'message': str(e),
                'environment': ENVIRONMENT,
                'function': 'generate-presigned-url'
            })
        }
    
    except ClientError as e:
        error_code = e.response.get('Error', {}).get('Code', 'Unknown')
        logger.error(f"AWS S3 error ({error_code}): {str(e)}")
        return {
            'statusCode': 403 if error_code in ['AccessDenied', 'NoSuchBucket'] else 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'success': False,
                'error': 'S3 Error',
                'message': f"S3 operation failed: {error_code}",
                'environment': ENVIRONMENT,
                'function': 'generate-presigned-url'
            })
        }
        
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'success': False,
                'error': 'Internal Server Error',
                'message': str(e),
                'environment': ENVIRONMENT,
                'function': 'generate-presigned-url'
            })
        }